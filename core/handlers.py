from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.dispatcher import Dispatcher
import logging
import hashlib
from .database import get_user_questions, delete_user_question, add_user_question
from .database import get_faq_answer,insert_faq_question,is_user_registered,insert_user,get_all_faq_questions,log_unanswered_question,get_question_by_hash
from .registration import start_registration, process_name, process_phone, RegistrationStates
from .nlp_utils import find_similar_questions
# from core.keyboards import get_main_menu_keyboard

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞ FAQ"),
            KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        ],
        [
            KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
            KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        ]
    ],
    resize_keyboard=True,   # –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–≥–æ–Ω—è—é—Ç—Å—è –ø–æ–¥ —à–∏—Ä–∏–Ω—É
    one_time_keyboard=False # False ‚Äî —á—Ç–æ–±—ã –Ω–µ –∏—Å—á–µ–∑–∞–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
)



PROFILE_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã"), KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

CONTACT_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

MAIN_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[

        [KeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ"), KeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚ùì HELP"), KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    persistent=True
)

MENU_OPTIONS_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ"), KeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    persistent=True
)


def get_main_menu_keyboard():
    """
    –ì–ª–∞–≤–Ω–æ–µ inline-–º–µ–Ω—é –±–æ—Ç–∞
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ", callback_data="menu:export"),
            InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="menu:instruction")
        ],
        [
            InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="menu:ticket"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help")
        ],
        [
            InlineKeyboardButton(text="üè† –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="menu:main")
        ]
    ])

async def handle_status(message: Message):
    user_id = message.from_user.id
    questions = get_user_questions(user_id)
    total = len(questions)
    answered = len([q for q in questions if q[2]])
    unanswered = len([q for q in questions if not q[2]])
    rejected = len([q for q in questions if q[3] == "red"])
    text = (
        f"üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n\n"
        f"‚Äî –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n"
        f"‚Äî –° –æ—Ç–≤–µ—Ç–æ–º: {answered} üü¢\n"
        f"‚Äî –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞: {unanswered} üü°\n"
        f"‚Äî –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected} üî¥"
    )
    await message.answer(text)

async def delete_question_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    q_id = int(callback.data.split(":")[1])
    success = delete_user_question(user_id, q_id)
    if success:
        await callback.message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    else:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    await callback.answer()

async def handle_my_questions(message: Message):
    user_id = message.from_user.id
    questions = get_user_questions(user_id)
    if not questions:
        await message.answer("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    text = "üìÇ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    status_map = {"green": "üü¢", "yellow": "üü°", "red": "üî¥"}
    for q_id, q, a, s in questions:
        text += f"{status_map.get(s,'‚ùî')} {q}\n"
    await message.answer(text)

async def handle_edit_questions(message: Message):
    user_id = message.from_user.id
    questions = get_user_questions(user_id)
    if not questions:
        await message.answer("‚úèÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for q_id, q, a, s in questions:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üóë {q[:30]}...",
                callback_data=f"deleteq:{q_id}"
            )
        ])
    await message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

async def cmd_start(message: Message):
    if is_user_registered(message.from_user.id):
        welcome_text = (
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=CONTACT_KB
        )

async def handle_faq(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≥—Ä—É–∑–∫–∞ FAQ.")

INSTRUCTION_TEXT = (
    "ü§ñ‚ú® –ü—Ä–∏–≤–µ—Ç! FAQ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞—É—Ñ\n\n"
    "–í–æ—Ç –∫–∞–∫ —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è:\n"
    "1Ô∏è‚É£ –ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å –æ–±—ã—á–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º.\n"
    "üëâ –ü—Ä–∏–º–µ—Ä: '–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?'\n"
    "2Ô∏è‚É£ –Ø –∏—â—É –æ—Ç–≤–µ—Ç –ø–æ üîç –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ FAQ.\n"
    "‚Äì –ï—Å–ª–∏ –Ω–∞—Ö–æ–∂—É –ø–æ—Ö–æ–∂–µ–µ ‚Üí –ø–æ–∫–∞–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n"
    "‚Äì –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–∂—É ‚Üí —Ç—ã–∫–∞–π –∫–Ω–æ–ø–∫—É ‚ùå '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞' –∏ –≤–æ–ø—Ä–æ—Å —É–π–¥—ë—Ç –≤ –±–∞–∑—É.\n"
    "3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–π —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ üëç\n\n"
    "‚ö° –í–∞–∂–Ω–æ:\n"
    "‚Äì –ß–µ–º –ø–æ–Ω—è—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å ‚Üí —Ç–µ–º —Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç.\n"
    "‚Äì –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª–∏–Ω–Ω—ã–π, —è –µ–≥–æ —Å–æ–∫—Ä–∞—â—É –∏ –ø–æ–∫–∞–∂—É —Ä–µ–π—Ç–∏–Ω–≥ (üìä0.87*5).\n\n"
    "- üß† –ï—â—ë —É –º–µ–Ω—è –µ—Å—Ç—å –ø–∞–º—è—Ç—å! –í—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç, "
    "—è —Å–æ—Ö—Ä–∞–Ω—è—é –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ. –ü–æ—Ç–æ–º –º–æ–∂–µ—à—å –∑–∞–π—Ç–∏, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –≥–æ—Ä–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã —É–º–Ω–µ–µ –ø–∞—Ä—ã —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ üòé "
    "\n\nüéâ –í—Å—ë, –±–æ–ª—å—à–µ –¥—É–º–∞—Ç—å –Ω–µ –Ω–∞–¥–æ! –ñ–º–∏ –∫–Ω–æ–ø–∫–∏, —Å–º–æ—Ç—Ä–∏ –æ—Ç–≤–µ—Ç—ã –∏ –∫–∞–π—Ñ—É–π üï∫üíÉ"
)

async def handle_instruction(message: Message):
    await message.answer(INSTRUCTION_TEXT)

async def handle_create_task(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def handle_main_menu(message: Message):
    await message.answer("–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

async def contact_handler(message: Message, state: FSMContext):
    if message.contact:
        user = message.from_user
        insert_user(
            user_id=user.id,
            username=user.username or '',
            phone=message.contact.phone_number,
            full_name=message.contact.first_name or ''
        )
        welcome_text = (
            "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
        )

        await message.answer(
            welcome_text,
            reply_markup=MAIN_MENU_KB,
            parse_mode="Markdown"
        )
        await state.clear()

async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ HELP"""
    help_text = (
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "‚Ä¢ **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** - —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "‚Ä¢ **–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É** - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )
    await message.answer(help_text)

async def menu_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ üìã MENU"""
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=MENU_OPTIONS_KB
    )

async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=MAIN_MENU_KB
    )

async def export_faq_handler(message: Message):
    """–ó–∞–≥–ª—É—à–∫–∞: –≤—ã–≥—Ä—É–∑–∫–∞ FAQ"""
    await message.answer("üì• –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ FAQ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def create_ticket_handler(message: Message):
    """–ó–∞–≥–ª—É—à–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await message.answer("üé´ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

unanswered_map = {}

async def faq_handler(message: Message, state: FSMContext):
    if message.text in ["‚ùì HELP", "üìã MENU", "üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]:
        return
    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=CONTACT_KB)
        return
    user_question = message.text.strip()
    faq_questions = get_all_faq_questions()
    if not faq_questions:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        return
    similar = find_similar_questions(user_question, faq_questions)
    if similar:
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ (desc)
        similar = sorted(similar, key=lambda x: x[1], reverse=True)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for item in similar:
            q = item[0]
            avg = item[1] if len(item) > 1 else 0.0
            count = item[2] if len(item) > 2 else 1
            display_text = q[:35] + ("..." if len(q) > 35 else "")
            score_text = f" (üîé={avg:.2f}|‚öô={count})"
            btn_text = f"{display_text}{score_text}"
            q_hash = hashlib.sha256(q.encode()).hexdigest()[:16]
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=btn_text, callback_data=f"faq:{q_hash}")]
            )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üî¥–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Åüî¥", callback_data="unanswered:add")]
        )
        bot_msg = await message.answer("üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=keyboard)
        unanswered_map[(bot_msg.chat.id, bot_msg.message_id)] = user_question
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        insert_faq_question(user_question)
        log_unanswered_question(user_question)
        await message.answer("üìù –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

async def handle_unanswered(callback: CallbackQuery):
    try:
        key = (callback.message.chat.id, callback.message.message_id)
        user_q = unanswered_map.pop(key, None)
        if not user_q:
            await callback.answer("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. (–æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ)", show_alert=True)
            return
        insert_faq_question(user_q)
        log_unanswered_question(user_q)
        await callback.answer("üìù –í–∞—à –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –°–ø–∞—Å–∏–±–æ!", show_alert=True)
        await callback.message.reply("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç–∏–º.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ handle_unanswered:")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


async def process_faq_choice(callback: CallbackQuery):
    try:
        question_hash = callback.data.split(":")[1]
        original_question = get_question_by_hash(question_hash)
        if not original_question:
            raise ValueError("Question not found")
        answer = get_faq_answer(original_question)
        await callback.message.answer(f"üí° {answer}")
    except Exception:
        await callback.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    finally:
        await callback.answer()
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
import logging


async def inline_menu_handler(callback: CallbackQuery):
    try:
        action = callback.data.split(":")[1]

        if action == "export":
            await callback.message.answer("üì• **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "instruction":
            await callback.message.answer(INSTRUCTION_TEXT)

        elif action == "ticket":
            await callback.message.answer("üé´ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "help":
            await callback.message.answer("‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "main":
            try:
                await callback.message.edit_text(
                    "üè† **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**",
                    reply_markup=get_main_menu_keyboard()
                )
            except TelegramBadRequest as e:
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏–º
                if "message is not modified" in str(e):
                    await callback.answer()
                    return
                raise
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ inline_menu_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_start, F.text == "/start")
    dp.message.register(handle_faq, F.text == "–í—ã–≥—Ä—É–∑–∫–∞ FAQ")
    dp.message.register(handle_instruction, F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    dp.message.register(handle_create_task, F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    dp.message.register(handle_main_menu, F.text == "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    dp.message.register(contact_handler, F.contact)
    dp.message.register(process_name, StateFilter(RegistrationStates.waiting_for_name))
    dp.message.register(process_phone, StateFilter(RegistrationStates.waiting_for_phone))
    dp.message.register(help_handler, F.text == "‚ùì HELP")
    dp.message.register(menu_handler, F.text == "üìã MENU")
    dp.message.register(back_to_main_menu, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    dp.message.register(export_faq_handler, F.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ")
    dp.message.register(handle_instruction, F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    dp.message.register(create_ticket_handler, F.text == "üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    dp.message.register(handle_my_questions, F.text == "üìÇ –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã")
    dp.message.register(handle_edit_questions, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞")
    dp.message.register(handle_status, F.text == "üìä –°—Ç–∞—Ç—É—Å")
    dp.callback_query.register(delete_question_callback, F.data.startswith("deleteq:"))
    dp.message.register(faq_handler, F.text)
    dp.callback_query.register(process_faq_choice, F.data.startswith("faq:"))
    dp.callback_query.register(inline_menu_handler, F.data.startswith("menu:"))
    dp.callback_query.register(handle_unanswered, F.data == "unanswered:add")
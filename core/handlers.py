from aiogram import F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.dispatcher import Dispatcher
import logging
import hashlib

from .database import (
    get_faq_answer,
    insert_faq_question,
    is_user_registered,
    insert_user,
    get_all_faq_questions,
    log_unanswered_question,
    get_question_by_hash
)

from .registration import start_registration, process_name, process_phone, RegistrationStates
from .nlp_utils import find_similar_questions
from core.keyboards import get_main_menu_keyboard

# ====================
# –ö–Ω–æ–ø–∫–∏
# ====================

CONTACT_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

MAIN_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì HELP"), KeyboardButton(text="üìã MENU")],
        [KeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True,
    persistent=True
)

MENU_OPTIONS_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ"), KeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    persistent=True
)

# ====================
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ====================

async def cmd_start(message: Message):
    if is_user_registered(message.from_user.id):
        welcome_text = (
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=CONTACT_KB
        )

async def handle_faq(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≥—Ä—É–∑–∫–∞ FAQ.")

async def handle_instruction(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.")

async def handle_create_task(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def handle_main_menu(message: Message):
    await message.answer("–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())

async def contact_handler(message: Message, state: FSMContext):
    if message.contact:
        user = message.from_user
        insert_user(
            user_id=user.id,
            username=user.username or '',
            phone=message.contact.phone_number,
            full_name=message.contact.first_name or ''
        )
        welcome_text = (
            "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
        )
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()

async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ HELP"""
    help_text = (
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "‚Ä¢ **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** - —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "‚Ä¢ **–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É** - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )
    await message.answer(help_text)

async def menu_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ üìã MENU"""
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=MENU_OPTIONS_KB
    )

async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=MAIN_MENU_KB
    )

async def export_faq_handler(message: Message):
    """–ó–∞–≥–ª—É—à–∫–∞: –≤—ã–≥—Ä—É–∑–∫–∞ FAQ"""
    await message.answer("üì• –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ FAQ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def create_ticket_handler(message: Message):
    """–ó–∞–≥–ª—É—à–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await message.answer("üé´ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def faq_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è FAQ"""
    if message.text in ["‚ùì HELP", "üìã MENU", "üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]:
        return  # –≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏

    if not is_user_registered(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=CONTACT_KB)
        return

    user_question = message.text.strip()
    faq_questions = get_all_faq_questions()

    if not faq_questions:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        return

    similar = find_similar_questions(user_question, faq_questions, threshold=0.4)

    if similar:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for q, _ in similar:
            question_hash = hashlib.sha256(q.encode()).hexdigest()[:16]
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=q[:64], callback_data=f"faq:{question_hash}")]
            )
        await message.answer("üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=keyboard)
    else:
        insert_faq_question(user_question)
        log_unanswered_question(user_question)
        await message.answer("üìù –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

async def process_faq_choice(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ FAQ –ø–æ inline –∫–Ω–æ–ø–∫–µ"""
    try:
        question_hash = callback.data.split(":")[1]
        original_question = get_question_by_hash(question_hash)

        if not original_question:
            raise ValueError("Question not found")

        answer = get_faq_answer(original_question)
        await callback.message.answer(f"üí° {answer}")
    except Exception:
        await callback.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    finally:
        await callback.answer()

async def inline_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –º–µ–Ω—é"""
    try:
        action = callback.data.split(":")[1]

        if action == "export":
            await callback.message.answer("üì• **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "instruction":
            await callback.message.answer("üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "ticket":
            await callback.message.answer("üé´ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "help":
            await callback.message.answer("‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É** –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "main":
            await callback.message.edit_text(
                "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**",
                reply_markup=get_main_menu_keyboard()
            )

        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ inline_menu_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ====================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# ====================

async def register_handlers(dp: Dispatcher):
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_start, F.text == "/start")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    dp.message.register(handle_faq, F.text == "–í—ã–≥—Ä—É–∑–∫–∞ FAQ")
    dp.message.register(handle_instruction, F.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    dp.message.register(handle_create_task, F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    dp.message.register(handle_main_menu, F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.message.register(contact_handler, F.contact)

    # FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.message.register(process_name, StateFilter(RegistrationStates.waiting_for_name))
    dp.message.register(process_phone, StateFilter(RegistrationStates.waiting_for_phone))

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    dp.message.register(help_handler, F.text == "‚ùì HELP")
    dp.message.register(menu_handler, F.text == "üìã MENU")
    dp.message.register(back_to_main_menu, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    dp.message.register(export_faq_handler, F.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ")
    dp.message.register(handle_instruction, F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    dp.message.register(create_ticket_handler, F.text == "üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")

    # FAQ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    dp.message.register(faq_handler, F.text)

    # Inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(process_faq_choice, F.data.startswith("faq:"))
    dp.callback_query.register(inline_menu_handler, F.data.startswith("menu:"))

from aiogram import F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.dispatcher import Dispatcher
import hashlib


from .database import (
    get_faq_answer,
    insert_faq_question,
    is_user_registered,
    insert_user,
    get_all_faq_questions,
    log_unanswered_question,
    get_question_by_hash
)

from .registration import start_registration, process_name, process_phone, RegistrationStates
from .nlp_utils import find_similar_questions


HELP_EMOJI = "‚ùì"
MENU_EMOJI = "üìã"
EXPORT_EMOJI = "üì•"
INSTRUCTION_EMOJI = "üìñ"
TICKET_EMOJI = "üé´"
BACK_EMOJI = "‚óÄÔ∏è"
QUESTION_EMOJI = "üí¨"

CONTACT_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)


#+++++++++++++

async def inline_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "menu:action")
        action = callback.data.split(":")[1]

        if action == "export":
            await callback.message.answer("üì• **–í—ã–≥—Ä—É–∑–∫–∞ FAQ**\n\n–§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "instruction":
            instruction_text = (
                "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
                "1. üìù **–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å** - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç\n"
                "2. üîç **–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞** - –±–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
                "3. ‚úÖ **–í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞** - –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
                "4. üì® **–ü–µ—Ä–µ–≤–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É** - –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–π–¥–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n"
                "üí° **–°–æ–≤–µ—Ç:** —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞!"
            )
            await callback.message.answer(instruction_text, parse_mode="Markdown")

        elif action == "ticket":
            await callback.message.answer(
                "üé´ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
                "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
                "–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é - –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
            )

        elif action == "help":
            help_text = (
                "‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
                "‚Ä¢ üí¨ **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç\n"
                "‚Ä¢ üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
                "‚Ä¢ üì• **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** - —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
                "‚Ä¢ üé´ **–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É** - –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "**–ö–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
            )
            await callback.message.answer(help_text, parse_mode="Markdown")

        elif action == "main":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            welcome_text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:"
            await callback.message.edit_text(
                welcome_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ)
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ inline_menu_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def menu_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ MENU"""
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=MENU_OPTIONS_KB
    )

async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=MAIN_MENU_KB
    )

async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ HELP"""
    help_text = (
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "‚Ä¢ **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** - —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "‚Ä¢ **–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É** - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )
    await message.answer(help_text)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–µ–Ω—é
async def export_faq_handler(message: Message):
    """–í—ã–≥—Ä—É–∑–∫–∞ FAQ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üì• –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ FAQ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

async def instruction_handler(message: Message):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    instruction_text = (
        "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
        "1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n"
        "2. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
        "4. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–π–¥–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n\n"
        "üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è!"
    )
    await message.answer(instruction_text)

async def create_ticket_handler(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await message.answer("üé´ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


#+++++++++++++
def generate_question_hash(question: str) -> str:
    return hashlib.sha256(question.encode()).hexdigest()[:16]


# async def cmd_start(message: Message):
#     if is_user_registered(message.from_user.id):
#         await message.answer("–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
#     else:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:", reply_markup=CONTACT_KB)

#+++
# async def cmd_start(message: Message):
#     if is_user_registered(message.from_user.id):
#         await message.answer(
#             "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=MAIN_MENU_KB
#         )
#     else:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:", reply_markup=CONTACT_KB)


async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if is_user_registered(message.from_user.id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å inline –º–µ–Ω—é
        welcome_text = (
            "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        )
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º)
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=CONTACT_KB
        )

async def cmd_help(message: Message):
    help_text = (
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/faq - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
    )
    await message.answer(help_text)


async def cmd_reg(message: Message, state: FSMContext):
    await start_registration(message, state)


async def inline_menu_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "menu:action")
        action = callback.data.split(":")[1]

        if action == "export":
            await callback.message.answer("üì• **–í—ã–≥—Ä—É–∑–∫–∞ FAQ**\n\n–§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

        elif action == "instruction":
            instruction_text = (
                "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**\n\n"
                "1. üìù **–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å** - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç\n"
                "2. üîç **–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞** - –±–æ—Ç –Ω–∞–π–¥–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
                "3. ‚úÖ **–í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞** - –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
                "4. üì® **–ü–µ—Ä–µ–≤–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É** - –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–π–¥–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n"
                "üí° **–°–æ–≤–µ—Ç:** —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞!"
            )
            await callback.message.answer(instruction_text, parse_mode="Markdown")

        elif action == "ticket":
            await callback.message.answer(
                "üé´ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
                "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
                "–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é - –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
            )

        elif action == "help":
            help_text = (
                "‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
                "‚Ä¢ üí¨ **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç\n"
                "‚Ä¢ üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è** - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
                "‚Ä¢ üì• **–í—ã–≥—Ä—É–∑–∫–∞ FAQ** - —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
                "‚Ä¢ üé´ **–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É** - –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "**–ö–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
            )
            await callback.message.answer(help_text, parse_mode="Markdown")

        elif action == "main":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            welcome_text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:"
            await callback.message.edit_text(
                welcome_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ)
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ inline_menu_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# async def faq_handler(message: Message, state: FSMContext):
#     if not is_user_registered(message.from_user.id):
#         return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=CONTACT_KB)
#
#     user_question = message.text.strip()
#     faq_questions = get_all_faq_questions()
#
#     if not faq_questions:
#         await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
#         return
#
#     similar = find_similar_questions(user_question, faq_questions, threshold=0.4)
#
#     if similar:
#         keyboard = InlineKeyboardMarkup(inline_keyboard=[])
#         for q, _ in similar:
#             question_hash = generate_question_hash(q)
#             keyboard.inline_keyboard.append(
#                 [InlineKeyboardButton(
#                     text=q[:64],
#                     callback_data=f"faq:{question_hash}"
#                 )]
#             )
#         await message.answer("üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=keyboard)
#     else:
#         insert_faq_question(user_question)
#         log_unanswered_question(user_question)
#         await message.answer("üìù –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")


# async def contact_handler(message: Message, state: FSMContext):
#     if message.contact:
#         user = message.from_user
#         insert_user(
#             user_id=user.id,
#             username=user.username or '',
#             phone=message.contact.phone_number,
#             full_name=message.contact.first_name or ''
#         )
#         await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=ReplyKeyboardRemove())


#+++


async def faq_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
    if message.text in ["‚ùì HELP", "üìã MENU", "üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]:
        return  # –≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏

    if not is_user_registered(message.from_user.id):
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=CONTACT_KB)

    user_question = message.text.strip()
    faq_questions = get_all_faq_questions()

    if not faq_questions:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        return

    similar = find_similar_questions(user_question, faq_questions, threshold=0.4)

    if similar:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for q, _ in similar:
            question_hash = generate_question_hash(q)
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(
                    text=q[:64],
                    callback_data=f"faq:{question_hash}"
                )]
            )
        await message.answer("üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=keyboard)
    else:
        insert_faq_question(user_question)
        log_unanswered_question(user_question)
        await message.answer("üìù –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

# async def contact_handler(message: Message, state: FSMContext):
#     if message.contact:
#         user = message.from_user
#         insert_user(
#             user_id=user.id,
#             username=user.username or '',
#             phone=message.contact.phone_number,
#             full_name=message.contact.first_name or ''
#         )
#         await message.answer(
#             "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
#             reply_markup=MAIN_MENU_KB  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#         )
#         await state.clear()


#+++++
async def contact_handler(message: Message, state: FSMContext):
    if message.contact:
        user = message.from_user
        insert_user(
            user_id=user.id,
            username=user.username or '',
            phone=message.contact.phone_number,
            full_name=message.contact.first_name or ''
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline –º–µ–Ω—é –≤–º–µ—Å—Ç–æ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        welcome_text = (
            "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
        )
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()


async def process_faq_choice(callback: CallbackQuery):
    try:
        question_hash = callback.data.split(":")[1]
        original_question = get_question_by_hash(question_hash)

        if not original_question:
            raise ValueError("Question not found")

        answer = get_faq_answer(original_question)
        await callback.message.answer(f"üí° {answer}")
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    finally:
        await callback.answer()


MAIN_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì HELP"), KeyboardButton(text="üìã MENU")],
        [KeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True,
    persistent=True
)

# –ú–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
MENU_OPTIONS_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ"), KeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")],
        [KeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    persistent=True
)

# async def register_handlers(dp: Dispatcher):
#     dp.message.register(cmd_start, Command("start"))
#     dp.message.register(cmd_help, Command("help"))
#     dp.message.register(cmd_reg, Command("reg"))
#     dp.message.register(contact_handler, F.contact)
#     dp.message.register(process_name, StateFilter(RegistrationStates.waiting_for_name))
#     dp.message.register(process_phone, StateFilter(RegistrationStates.waiting_for_phone))
#     dp.message.register(faq_handler, F.text)
#     dp.callback_query.register(process_faq_choice, F.data.startswith("faq:"))


#+++++++++++

async def cmd_menu(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /menu"""
    if not is_user_registered(message.from_user.id):
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")

    await message.answer(
        "üìã **–ú–µ–Ω—é –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )




async def register_handlers(dp: Dispatcher):
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_reg, Command("reg"))
    dp.message.register(cmd_menu, Command("menu"))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
    dp.message.register(contact_handler, F.contact)

    # FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.message.register(process_name, StateFilter(RegistrationStates.waiting_for_name))
    dp.message.register(process_phone, StateFilter(RegistrationStates.waiting_for_phone))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    dp.message.register(help_handler, F.text == "‚ùì HELP")
    dp.message.register(menu_handler, F.text == "üìã MENU")
    dp.message.register(back_to_main_menu, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    dp.message.register(export_faq_handler, F.text == "üì• –í—ã–≥—Ä—É–∑–∫–∞ FAQ")
    dp.message.register(instruction_handler, F.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    dp.message.register(create_ticket_handler, F.text == "üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é)
    dp.message.register(faq_handler, F.text)

    # Inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(process_faq_choice, F.data.startswith("faq:"))
    dp.callback_query.register(inline_menu_handler, F.data.startswith("menu:"))